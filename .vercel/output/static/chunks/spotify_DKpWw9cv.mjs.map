{"version":3,"file":"spotify_DKpWw9cv.mjs","sources":["../../../../src/utils/spotify.js"],"sourcesContent":["import querystring from 'querystring';\n\n// Environment variables for Spotify API credentials\nconst client_id = import.meta.env.SPOTIFY_CLIENT_ID;\nconst client_secret = import.meta.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = import.meta.env.SPOTIFY_REFRESH_TOKEN;\n\n// Create a base64 encoded string of client_id:client_secret for authentication\nconst basic = Buffer.from(`${client_id}:${client_secret}`).toString('base64');\n\n// Spotify API endpoints\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\n/**\n * Function to get a new access token using the refresh token\n * @returns {Promise<Object>} A promise that resolves to the access token data\n */\nconst getAccessToken = async () => {\n  try {\n    console.log('Fetching access token from Spotify');\n\n    // Make a POST request to the Spotify token endpoint\n    const response = await fetch(TOKEN_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        Authorization: `Basic ${basic}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // Set the request body with the required parameters\n      body: querystring.stringify({\n        grant_type: 'refresh_token',\n        refresh_token,\n      }),\n    });\n\n    // Check if the response is successful\n    if (!response.ok) {\n      console.error('Error response from Spotify token endpoint:', response.status, response.statusText);\n      const errorBody = await response.text();\n      console.error('Error body:', errorBody);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Parse the JSON response\n    const data = await response.json();\n    console.log('Access token obtained successfully');\n    return data;\n  } catch (error) {\n    console.error('Error getting access token:', error);\n    throw error;\n  }\n};\n\n/**\n * Function to get the currently playing track from Spotify\n * @returns {Promise<Response>} A promise that resolves to the Spotify API response\n */\nconst getNowPlaying = async () => {\n  try {\n    // Get a new access token\n    const { access_token } = await getAccessToken();\n    console.log('Access token obtained, fetching now playing');\n\n    // Make a GET request to the Spotify API to get the currently playing track\n    const response = await fetch(NOW_PLAYING_ENDPOINT, {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    });\n\n    // Check if the response is successful\n    if (!response.ok) {\n      console.error('Error response from Spotify now playing endpoint:', response.status, response.statusText);\n      const errorBody = await response.text();\n      console.error('Error body:', errorBody);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response;\n  } catch (error) {\n    console.error('Error getting now playing:', error);\n    throw error;\n  }\n};\n\n// Export the functions for use in other parts of the application\nexport { getAccessToken, getNowPlaying };\n"],"names":[],"mappings":"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"}