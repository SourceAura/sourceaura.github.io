{"version":3,"file":"manifest_CqBuXmeM.mjs","sources":["../../../node_modules/astro/dist/core/routing/manifest/generator.js","../../../node_modules/astro/dist/core/routing/manifest/serialization.js","../../../node_modules/astro/dist/core/app/common.js"],"sourcesContent":["function sanitizeParams(params) {\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => {\n      if (typeof value === \"string\") {\n        return [key, value.normalize().replace(/#/g, \"%23\").replace(/\\?/g, \"%3F\")];\n      }\n      return [key, value];\n    })\n  );\n}\nfunction getParameter(part, params) {\n  if (part.spread) {\n    return params[part.content.slice(3)] || \"\";\n  }\n  if (part.dynamic) {\n    if (!params[part.content]) {\n      throw new TypeError(`Missing parameter: ${part.content}`);\n    }\n    return params[part.content];\n  }\n  return part.content.normalize().replace(/\\?/g, \"%3F\").replace(/#/g, \"%23\").replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n}\nfunction getSegment(segment, params) {\n  const segmentPath = segment.map((part) => getParameter(part, params)).join(\"\");\n  return segmentPath ? \"/\" + segmentPath : \"\";\n}\nfunction getRouteGenerator(segments, addTrailingSlash) {\n  return (params) => {\n    const sanitizedParams = sanitizeParams(params);\n    let trailing = \"\";\n    if (addTrailingSlash === \"always\" && segments.length) {\n      trailing = \"/\";\n    }\n    const path = segments.map((segment) => getSegment(segment, sanitizedParams)).join(\"\") + trailing;\n    return path || \"/\";\n  };\n}\nexport {\n  getRouteGenerator\n};\n","import { getRouteGenerator } from \"./generator.js\";\nfunction serializeRouteData(routeData, trailingSlash) {\n  return {\n    ...routeData,\n    generate: void 0,\n    pattern: routeData.pattern.source,\n    redirectRoute: routeData.redirectRoute ? serializeRouteData(routeData.redirectRoute, trailingSlash) : void 0,\n    fallbackRoutes: routeData.fallbackRoutes.map((fallbackRoute) => {\n      return serializeRouteData(fallbackRoute, trailingSlash);\n    }),\n    _meta: { trailingSlash }\n  };\n}\nfunction deserializeRouteData(rawRouteData) {\n  return {\n    route: rawRouteData.route,\n    type: rawRouteData.type,\n    pattern: new RegExp(rawRouteData.pattern),\n    params: rawRouteData.params,\n    component: rawRouteData.component,\n    generate: getRouteGenerator(rawRouteData.segments, rawRouteData._meta.trailingSlash),\n    pathname: rawRouteData.pathname || void 0,\n    segments: rawRouteData.segments,\n    prerender: rawRouteData.prerender,\n    redirect: rawRouteData.redirect,\n    redirectRoute: rawRouteData.redirectRoute ? deserializeRouteData(rawRouteData.redirectRoute) : void 0,\n    fallbackRoutes: rawRouteData.fallbackRoutes.map((fallback) => {\n      return deserializeRouteData(fallback);\n    }),\n    isIndex: rawRouteData.isIndex\n  };\n}\nexport {\n  deserializeRouteData,\n  serializeRouteData\n};\n","import { decodeKey } from \"../encryption.js\";\nimport { deserializeRouteData } from \"../routing/manifest/serialization.js\";\nfunction deserializeManifest(serializedManifest) {\n  const routes = [];\n  for (const serializedRoute of serializedManifest.routes) {\n    routes.push({\n      ...serializedRoute,\n      routeData: deserializeRouteData(serializedRoute.routeData)\n    });\n    const route = serializedRoute;\n    route.routeData = deserializeRouteData(serializedRoute.routeData);\n  }\n  const assets = new Set(serializedManifest.assets);\n  const componentMetadata = new Map(serializedManifest.componentMetadata);\n  const inlinedScripts = new Map(serializedManifest.inlinedScripts);\n  const clientDirectives = new Map(serializedManifest.clientDirectives);\n  const serverIslandNameMap = new Map(serializedManifest.serverIslandNameMap);\n  const key = decodeKey(serializedManifest.key);\n  return {\n    // in case user middleware exists, this no-op middleware will be reassigned (see plugin-ssr.ts)\n    middleware(_, next) {\n      return next();\n    },\n    ...serializedManifest,\n    assets,\n    componentMetadata,\n    inlinedScripts,\n    clientDirectives,\n    routes,\n    serverIslandNameMap,\n    key\n  };\n}\nexport {\n  deserializeManifest\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2]}