{"version":3,"file":"build-service_D2z5vTAf.mjs","sources":["../../../../node_modules/@astrojs/vercel/dist/image/shared.js","../../../../node_modules/@astrojs/vercel/dist/image/build-service.js"],"sourcesContent":["export function getDefaultImageConfig(astroImageConfig) {\n    return {\n        sizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n        domains: astroImageConfig.domains ?? [],\n        // Cast is necessary here because Vercel's types are slightly different from ours regarding allowed protocols. Behavior should be the same, however.\n        remotePatterns: astroImageConfig.remotePatterns ?? [],\n    };\n}\nexport function isESMImportedImage(src) {\n    return typeof src === 'object';\n}\nexport const qualityTable = {\n    low: 25,\n    mid: 50,\n    high: 80,\n    max: 100,\n};\nexport function getAstroImageConfig(images, imagesConfig, command, devImageService, astroImageConfig) {\n    let devService = '@astrojs/vercel/dev-image-service';\n    switch (devImageService) {\n        case 'sharp':\n            devService = '@astrojs/vercel/dev-image-service';\n            break;\n        case 'squoosh':\n            devService = '@astrojs/vercel/squoosh-dev-image-service';\n            break;\n        default:\n            if (typeof devImageService === 'string') {\n                devService = devImageService;\n            }\n            else {\n                devService = '@astrojs/vercel/dev-image-service';\n            }\n            break;\n    }\n    if (images) {\n        return {\n            image: {\n                service: {\n                    entrypoint: command === 'dev' ? devService : '@astrojs/vercel/build-image-service',\n                    config: imagesConfig ? imagesConfig : getDefaultImageConfig(astroImageConfig),\n                },\n            },\n        };\n    }\n    return {};\n}\nexport function sharedValidateOptions(options, serviceConfig, mode) {\n    const vercelImageOptions = serviceConfig;\n    if (mode === 'development' &&\n        (!vercelImageOptions.sizes || vercelImageOptions.sizes.length === 0)) {\n        throw new Error('Vercel Image Optimization requires at least one size to be configured.');\n    }\n    const configuredWidths = vercelImageOptions.sizes.sort((a, b) => a - b);\n    // The logic for finding the perfect width is a bit confusing, here it goes:\n    // For images where no width has been specified:\n    // - For local, imported images, fallback to nearest width we can find in our configured\n    // - For remote images, that's an error, width is always required.\n    // For images where a width has been specified:\n    // - If the width that the user asked for isn't in `sizes`, then fallback to the nearest one, but save the width\n    // \tthe user asked for so we can put it on the `img` tag later.\n    // - Otherwise, just use as-is.\n    // The end goal is:\n    // - The size on the page is always the one the user asked for or the base image's size\n    // - The actual size of the image file is always one of `sizes`, either the one the user asked for or the nearest to it\n    if (!options.width) {\n        const src = options.src;\n        if (isESMImportedImage(src)) {\n            const nearestWidth = configuredWidths.reduce((prev, curr) => {\n                return Math.abs(curr - src.width) < Math.abs(prev - src.width) ? curr : prev;\n            });\n            // Use the image's base width to inform the `width` and `height` on the `img` tag\n            options.inputtedWidth = src.width;\n            options.width = nearestWidth;\n        }\n        else {\n            throw new Error(`Missing \\`width\\` parameter for remote image ${options.src}`);\n        }\n    }\n    else {\n        if (!configuredWidths.includes(options.width)) {\n            const nearestWidth = configuredWidths.reduce((prev, curr) => {\n                // biome-ignore lint/style/noNonNullAssertion: <explanation>\n                return Math.abs(curr - options.width) < Math.abs(prev - options.width) ? curr : prev;\n            });\n            // Save the width the user asked for to inform the `width` and `height` on the `img` tag\n            options.inputtedWidth = options.width;\n            options.width = nearestWidth;\n        }\n    }\n    if (options.quality && typeof options.quality === 'string') {\n        options.quality = options.quality in qualityTable ? qualityTable[options.quality] : undefined;\n    }\n    if (!options.quality) {\n        options.quality = 100;\n    }\n    return options;\n}\n","import { baseService } from 'astro/assets';\nimport { isESMImportedImage, sharedValidateOptions } from './shared.js';\nconst service = {\n    ...baseService,\n    validateOptions: (options, serviceOptions) => sharedValidateOptions(options, serviceOptions.service.config, 'production'),\n    getHTMLAttributes(options) {\n        const { inputtedWidth, ...props } = options;\n        // If `validateOptions` returned a different width than the one of the image, use it for attributes\n        if (inputtedWidth) {\n            props.width = inputtedWidth;\n        }\n        let targetWidth = props.width;\n        let targetHeight = props.height;\n        if (isESMImportedImage(props.src)) {\n            const aspectRatio = props.src.width / props.src.height;\n            if (targetHeight && !targetWidth) {\n                // If we have a height but no width, use height to calculate the width\n                targetWidth = Math.round(targetHeight * aspectRatio);\n            }\n            else if (targetWidth && !targetHeight) {\n                // If we have a width but no height, use width to calculate the height\n                targetHeight = Math.round(targetWidth / aspectRatio);\n            }\n            else if (!targetWidth && !targetHeight) {\n                // If we have neither width or height, use the original image's dimensions\n                targetWidth = props.src.width;\n                targetHeight = props.src.height;\n            }\n        }\n        const { src, width, height, format, quality, densities, widths, formats, ...attributes } = options;\n        return {\n            ...attributes,\n            width: targetWidth,\n            height: targetHeight,\n            loading: attributes.loading ?? 'lazy',\n            decoding: attributes.decoding ?? 'async',\n        };\n    },\n    getURL(options) {\n        const fileSrc = isESMImportedImage(options.src)\n            ? removeLeadingForwardSlash(options.src.src)\n            : options.src;\n        const searchParams = new URLSearchParams();\n        searchParams.append('url', fileSrc);\n        options.width && searchParams.append('w', options.width.toString());\n        options.quality && searchParams.append('q', options.quality.toString());\n        // biome-ignore lint/style/useTemplate: <explanation>\n        return '/_vercel/image?' + searchParams;\n    },\n};\nfunction removeLeadingForwardSlash(path) {\n    return path.startsWith('/') ? path.substring(1) : path;\n}\nexport default service;\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}