{"version":3,"file":"Quasar_BOFh4QNG.mjs","sources":["../../src/components/Quasar.astro"],"sourcesContent":["<div id=\"quasar\" class=\"absolute inset-0\">\n  <canvas id=\"quasar-canvas\"></canvas>\n</div>\n\n<script>\n  import invariant from \"tiny-invariant\";\n\n  const COUNT = 800;\n  const SPEED = 0.1;\n\n  class Star {\n    x: number;\n    y: number;\n    z: number;\n    xPrev: number;\n    yPrev: number;\n\n    constructor(x = 0, y = 0, z = 0) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.xPrev = x;\n      this.yPrev = y;\n    }\n\n    update(width: number, height: number, speed: number) {\n      this.xPrev = this.x;\n      this.yPrev = this.y;\n      this.z += speed * 0.0675;\n      this.x += this.x * (speed * 0.0225) * this.z;\n      this.y += this.y * (speed * 0.0225) * this.z;\n      if (\n        this.x > width / 2 ||\n        this.x < -width / 2 ||\n        this.y > height / 2 ||\n        this.y < -height / 2\n      ) {\n        this.x = Math.random() * width - width / 2;\n        this.y = Math.random() * height - height / 2;\n        this.xPrev = this.x;\n        this.yPrev = this.y;\n        this.z = 0;\n      }\n    }\n\n    draw(ctx: CanvasRenderingContext2D) {\n      ctx.lineWidth = this.z;\n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(this.xPrev, this.yPrev);\n      ctx.stroke();\n    }\n  }\n\n  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));\n  let rafId = 0;\n\n  const canvas = document.querySelector(\"#quasar-canvas\") as HTMLCanvasElement;\n  invariant(canvas, \"canvas should not be null\");\n  const ctx = canvas.getContext(\"2d\");\n\n  const container = document.querySelector(\"#quasar\") as HTMLElement;\n  invariant(container, \"container should not be null\");\n  const resizeObserver = new ResizeObserver(setup);\n  resizeObserver.observe(container);\n\n  function setup() {\n    invariant(ctx, \"canvas context should not be null\");\n    rafId > 0 && cancelAnimationFrame(rafId);\n\n    const { clientWidth: width, clientHeight: height } = container;\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    ctx.scale(dpr, dpr);\n\n    for (const star of stars) {\n      star.x = Math.random() * width - width / 2;\n      star.y = Math.random() * height - height / 2;\n      star.z = 0;\n    }\n\n    ctx.translate(width / 2, height / 2);\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.4)\";\n    ctx.strokeStyle = \"white\";\n    rafId = requestAnimationFrame(frame);\n  }\n\n  function frame() {\n    invariant(ctx, \"canvas context should not be null\");\n    const { clientWidth: width, clientHeight: height } = container;\n\n    for (const star of stars) {\n      star.update(width, height, SPEED);\n      star.draw(ctx);\n    }\n\n    ctx.fillRect(-width / 2, -height / 2, width, height);\n    rafId = requestAnimationFrame(frame);\n  }\n</script>\n"],"names":["$$render","$$maybeRenderHead"],"mappings":";;;;;AAAA,CAAA,CAAA,MAAA,CAAAA,cAAA,CAAA,CAAAC,CAAAA,eAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA,CAAA,KAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,UAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,EAAA,CAAA,GAAA,CAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;"}