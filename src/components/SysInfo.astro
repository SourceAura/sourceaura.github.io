---
import Container from "@components/Container.astro";
import { getNowPlaying } from "../utils/spotify";
import NowPlaying from "@components/NowPlaying.astro";

// Fetch the current playback state
let playbackState = "loading";
let trackInfo = "Loading...";
let coverArt = "";
try {
  const response = await getNowPlaying();
  if (response.status === 204) {
    playbackState = "not_playing";
    trackInfo = "ðŸ˜´ afk ðŸ’¤";
  } else if (response.status === 200) {
    const data = await response.json();
    playbackState = data.is_playing ? "playing" : "paused";
    trackInfo = data.item
      ? `${data.item.name} - ${data.item.artists[0].name}`
      : "No track information";
    coverArt = data.item?.album.images[0]?.url || "";
  }
} catch (error) {
  console.error("Error fetching Spotify playback state:", error);
  playbackState = "error";
  trackInfo = "Error fetching data";
}
---

<Container style="width: 210px; overflow: hidden; padding: 0 10px;">
  <button
    id="sys-info-btn"
    aria-label="System information"
    class="group relative flex w-full items-center justify-between overflow-hidden rounded-full border border-black/15 hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5"
    style={`background-image: url(${coverArt}); background-size: cover; background-position: center; background-color: rgba(0, 0, 0, 0.5);`}
  >
    <span
      id="current-time"
      class="text-ghost-600 cursor-pointer text-sm"
      style="white-space: nowrap; padding-left: 11px;"></span>
    <span
      id="track-info"
      class="text-ghost-600 marquee max-w-full cursor-pointer truncate text-sm"
      >{trackInfo}</span
    >
    <span
      id="online-indicator"
      class="glow-ring h-1 w-1 rounded-full"
      data-state={playbackState}
      title="Spotify status"
      style="padding-right: 11px;"></span>
  </button>

  <div
    id="now-playing-popover"
    class="absolute left-1/2 z-50 mt-2 hidden w-[310px] -translate-x-1/2 transform rounded bg-white shadow-lg"
  >
    <!-- NowPlaying component will be displayed here -->
    <NowPlaying class="w-full" />
  </div>

  <script
    define:vars={{
      initialPlaybackState: playbackState,
      initialTrackInfo: trackInfo,
      initialCoverArt: coverArt,
    }}
  >
    let playbackState = initialPlaybackState;
    let trackInfo = initialTrackInfo;
    let coverArt = initialCoverArt;

    function updateIndicatorState() {
      const indicator = document.getElementById("online-indicator");
      const trackInfoElement = document.getElementById("track-info");
      const sysInfoBtn = document.getElementById("sys-info-btn");

      if (indicator && trackInfoElement && sysInfoBtn) {
        switch (playbackState) {
          case "playing":
            indicator.className =
              "glow-ring h-1.5 w-1.5 rounded-full bg-green-600";
            indicator.setAttribute("title", "Spotify: Playing");
            indicator.style.boxShadow = "0 0 5px green, 0 0 10px lime";
            break;
          case "paused":
            indicator.className =
              "glow-ring h-1.5 w-1.5 rounded-full bg-yellow-600";
            indicator.setAttribute("title", "Spotify: Paused");
            indicator.style.boxShadow = "0 0 5px yellow, 0 0 10px orange";
            break;
          case "not_playing":
          case "offline":
          default:
            indicator.className =
              "glow-ring h-1.5 w-1.5 rounded-full bg-red-600";
            indicator.setAttribute("title", "Spotify: Not playing or offline");
            indicator.style.boxShadow = "0 0 5px red, 0 0 10px crimson";
            break;
        }

        trackInfoElement.textContent = trackInfo;
        sysInfoBtn.style.backgroundImage = `url(${coverArt})`;
      }
    }

    function updateCurrentTime() {
      const timeElement = document.getElementById("current-time");
      if (timeElement) {
        const now = new Date();
        timeElement.textContent = now.toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
      }
    }
    // Time Display
    updateIndicatorState();
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);

    document
      .getElementById("track-info")
      ?.addEventListener("click", (event) => {
        event.stopPropagation();
        // Toggle the visibility of the NowPlaying component
        const nowPlayingElement = document.getElementById(
          "now-playing-popover",
        );
        nowPlayingElement.classList.toggle("hidden");
        nowPlayingElement.style.top = `${event.target.getBoundingClientRect().bottom}px`; // Position below the track info
        nowPlayingElement.style.left = `${event.target.getBoundingClientRect().left}px`; // Align with track info
      });

    document.getElementById("sys-info-btn")?.addEventListener("click", () => {
      window.location.href = "/euthymia";
    });

    // Fetch updated now playing information every 7 seconds
    setInterval(async () => {
      try {
        const response = await fetch("/api/now-playing");
        if (response.ok) {
          const data = await response.json();
          playbackState = data.is_playing ? "playing" : "paused";
          trackInfo = data.item
            ? `${data.item.name} - ${data.item.artists[0].name}`
            : "No track information";
          coverArt = data.item?.album.images[0]?.url || "";
          updateIndicatorState();
        }
      } catch (error) {
        console.error("Error fetching now playing data:", error);
      }
    }, 7000);

    document.getElementById("close-modal")?.addEventListener("click", () => {
      document.getElementById("now-playing-modal")?.classList.add("hidden");
    });
  </script>

  <style>
    .glow-ring {
      position: relative;
      border: 1px solid transparent;
      border-radius: 50%;
      animation: pulsate 2s infinite;
      margin-left: 8px;
    }

    @keyframes pulsate {
      0% {
        transform: scale(0.9);
        box-shadow: 0 0 0 0px rgba(255, 255, 255, 0.7);
      }
      50% {
        transform: scale(1);
        box-shadow: 0 0 0 5px rgba(255, 255, 255, 0);
      }
      100% {
        transform: scale(0.9);
        box-shadow: 0 0 0 0px rgba(255, 255, 255, 0);
      }
    }

    @keyframes moveGradient {
      0% {
        background-position: 0% 50%;
      }
      100% {
        background-position: 100% 50%;
      }
    }

    #track-info {
      display: inline-block;
      white-space: nowrap;
      overflow: hidden;
      width: 100%;
      animation: marquee 10s linear infinite;
    }

    @keyframes marquee {
      0% {
        transform: translateX(100%);
      }
      100% {
        transform: translateX(-100%);
      }
    }
  </style>
</Container>
