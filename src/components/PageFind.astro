---
import Search from "astro-pagefind/components/Search";
// Define your navigation pages
const navigationPages = [
  { title: "Home", url: "/" },
  { title: "Petals", url: "/petals" },
  { title: "About", url: "/about" },
  { title: "404", url: "/404" },
  // Add any other main pages you want to include in the search
];
---

<div
  transition:persist
  id="backdrop"
  class="bg-[rgba(0, 0, 0, 0.5] invisible fixed left-0 top-0 z-50 flex h-screen w-full justify-center p-6 backdrop-blur-sm"
>
  <div
    id="pagefind-container"
    class="m-0 flex h-fit max-h-[80%] w-full max-w-screen-sm flex-col overflow-auto rounded border border-black/15 bg-neutral-100 p-2 px-4 py-3 shadow-lg dark:border-white/20 dark:bg-neutral-900 relative"
  >
    <Search
      id="search"
      className="pagefind-ui"
      uiOptions={{
        showImages: true,
        excerptLength: 15,
        resetStyles: false, 
      }}
    />


    <div class="text-right text-xs dark:prose-invert mt-2">
      Press <span class="prose text-xs dark:prose-invert"
        ><kbd class="">Esc</kbd></span> 
    </div>
  </div>
</div>

<script define:vars={{ navigationPages }}>
  const ase = document.getElementById("ase");
  if (ase) {
    ase.addEventListener("click", () => {
      openPagefind();
    });
  }

  const backdrop = document.getElementById("backdrop");

  function openPagefind() {
    const searchDiv = document.getElementById("search");
    const search = searchDiv.querySelector("input");
    setTimeout(() => {
      search.focus();
    }, 0);
    backdrop?.classList.remove("invisible");
    backdrop?.classList.add("visible");
  }

  function closePagefind() {
    const search = document.getElementById("search");
    search.value = "";
    backdrop?.classList.remove("visible");
    backdrop?.classList.add("invisible");
  }

  // open pagefind
  ase?.addEventListener("click", () => {
    openPagefind();
  });
  // a pseudo pagefind cmd + k
  document.addEventListener("keydown", (e) => {
    if (e.key === "/") {
      e.preventDefault();
      openPagefind();
    } else if ((e.metaKey || e.ctrlKey) && e.key === "k") {
      e.preventDefault();
      openPagefind();
    }
  });

  // close pagefind
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" || e.keyCode === 27) {
      closePagefind();
    }
  });

  backdrop?.addEventListener("click", (event) => {
    if (!event.target.closest("#pagefind-container")) {
      closePagefind();
    }
  });

  // prevent form submission
  const form = document.getElementById("form");
  form?.addEventListener("submit", (event) => {
    event.preventDefault();
  });

  // Custom search function
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function customSearch(query) {
    const lowercaseQuery = query.toLowerCase();
    const matchingPages = navigationPages.filter(page => 
      page.title.toLowerCase().includes(lowercaseQuery)
    );

    const searchResults = document.querySelector('.pagefind-ui__results');
    if (!searchResults) return; // Ensure the element exists
    
    // Clear existing navigation results
    const existingNavigationResults = searchResults.querySelectorAll('.navigation-result');
    existingNavigationResults.forEach(result => result.remove());

    // Add matching navigation pages to the top of the results
    matchingPages.forEach(page => {
      const navigationResult = document.createElement('div');
      navigationResult.className = 'pagefind-ui__result navigation-result';
      navigationResult.innerHTML = `
        <h3 class="pagefind-ui__result-title">
          <a href="${page.url}">${page.title}</a>
        </h3>
        <p class="pagefind-ui__result-excerpt">Navigate to ${page.title} page</p>
      `;
      searchResults.insertBefore(navigationResult, searchResults.firstChild);
    });
  }

  // Ensure PageFind is initialized before adding event listeners
  window.addEventListener('load', () => {
    const searchInput = document.querySelector('.pagefind-ui__search-input');
    if (searchInput) {
      const debouncedCustomSearch = debounce(customSearch, 300);
      searchInput.addEventListener('input', (e) => {
        debouncedCustomSearch(e.target.value);
      });
    }
  });

  // Override the default search behavior
  const searchInput = document.querySelector('.pagefind-ui__search-input');
  searchInput.addEventListener('input', (e) => {
    setTimeout(() => {
      customSearch(e.target.value);
    }, 100); // Small delay to ensure PageFind has updated the results
  });
</script>

<style is:global>
  :root {
    --pagefind-ui-scale: 0.75;
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: 3px;
    --pagefind-ui-font: "Geist", sans-serif;
    --pagefind-ui-primary: transparent;
    --pagefind-ui-text: #3d3d3d;
    --pagefind-ui-background: transparent;
    --pagefind-ui-border: #d0d0d0;
    --pagefind-ui-tag: transparent !importantS;
  }

  .dark {
    --pagefind-ui-primary: #d4d4d4;
    --pagefind-ui-text: #d4d4d4;
    --pagefind-ui-background: transparent;
    --pagefind-ui-border: #404040;
  }

  #search input {
    /* color: ghostwhite; */
    font-weight: normal;
    background: transparent;
  }

  #search p {
    font-weight: normal;
  }

  #search .pagefind-ui__result-title {
    font-weight: 600;
  }

  #search .pagefind-ui__message {
    padding: 0;
    padding-bottom: 0.75rem;
  }
  #pagefind-container {
    background: transparent;
  }

  /* Update these styles for the highlight */
  #search .pagefind-ui__result-excerpt mark {
    background-color: transparent;
    outline: 1px solid currentColor;
    outline-offset: 1px;
    border-radius: 2px;
    color: inherit;
    mix-blend-mode: difference;
  }

  .dark #search .pagefind-ui__result-excerpt mark {
    /* Remove this rule as it's no longer needed */
  }
</style>
