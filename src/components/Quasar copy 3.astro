---
---

<quasar-background></quasar-background>

<style>
  quasar-background {
    position: fixed;
    inset: 0;
    z-index: -1;
  }

  @keyframes shimmer {
    0% {
      --shimmer: 0deg;
    }
    100% {
      --shimmer: 360deg;
    }
  }

  @keyframes shine {
    0% {
      opacity: 0;
    }
    15% {
      opacity: 1;
    }
    55% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  .shimmer {
    position: absolute;
    inset: -40px;
    border-radius: inherit;
    mask-image: conic-gradient(
      from var(--shimmer, 0deg),
      transparent 0%,
      transparent 10%,
      black 36%,
      black 45%,
      transparent 50%,
      transparent 60%,
      black 85%,
      black 95%,
      transparent 100%
    );
    mask-size: cover;
    mix-blend-mode: plus-lighter;
    animation: shimmer 1s linear infinite both;
    opacity: 0;
    pointer-events: none;
  }

  .shimmer::before,
  .shimmer::after {
    content: "";
    border-radius: inherit;
    position: absolute;
    inset: 40px;
    pointer-events: none;
  }

  .shimmer::before {
    box-shadow:
      0 0 3px 2px var(--shimmer-color-1),
      0 0 7px 4px var(--shimmer-color-2),
      0 0 13px 4px var(--shimmer-color-3),
      0 0 25px 5px var(--shimmer-color-4);
    z-index: -1;
  }

  .shimmer::after {
    box-shadow:
      inset 0 0 0 1px var(--shimmer-color-5),
      inset 0 0 2px 1px var(--shimmer-color-6),
      inset 0 0 5px 2px var(--shimmer-color-7);
    z-index: 2;
  }

  .shimmer-active {
    animation: shine 1.2s ease-in 1 forwards;
  }

  :root {
    --shimmer-color-1: hsl(222deg 20% 95%);
    --shimmer-color-2: hsl(222deg 20% 80%);
    --shimmer-color-3: hsl(222deg 50% 70%);
    --shimmer-color-4: hsl(222deg 100% 70%);
    --shimmer-color-5: hsl(222deg 70% 95%);
    --shimmer-color-6: hsl(222deg 100% 80%);
    --shimmer-color-7: hsl(222deg 100% 70%);
  }

  .light {
    --shimmer-color-1: hsl(222deg 20% 5%);
    --shimmer-color-2: hsl(222deg 20% 20%);
    --shimmer-color-3: hsl(222deg 50% 30%);
    --shimmer-color-4: hsl(222deg 100% 30%);
    --shimmer-color-5: hsl(222deg 70% 5%);
    --shimmer-color-6: hsl(222deg 100% 20%);
    --shimmer-color-7: hsl(222deg 100% 30%);
  }
</style>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 800;
  const SPEED = 0.1;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width: number, height: number, speed: number, deltaTime: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675 * deltaTime;
      this.x += this.x * (speed * 0.0225) * this.z * deltaTime;
      this.y += this.y * (speed * 0.0225) * this.z * deltaTime;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D, isLightMode: boolean) {
      const alpha = Math.min(this.z, 1);
      ctx.strokeStyle = isLightMode
        ? `rgba(0, 0, 0, ${alpha})`
        : `rgba(255, 255, 255, ${alpha})`;
      ctx.lineWidth = Math.min(this.z * 0.5, 2);
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  class QuasarBackground extends HTMLElement {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private stars: Star[];
    private rafId: number;
    private lastTime: number;
    private visualizerCanvas: HTMLCanvasElement;
    private visualizerCtx: CanvasRenderingContext2D;
    private audio: number[];
    private svgContainer: HTMLDivElement;
    private shimmerElement: HTMLDivElement;
    private isLightMode: boolean;

    constructor() {
      super();
      this.canvas = document.createElement("canvas");
      this.ctx = this.canvas.getContext("2d")!;
      this.stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
      this.rafId = 0;
      this.lastTime = 0;

      this.visualizerCanvas = document.createElement("canvas");
      this.visualizerCtx = this.visualizerCanvas.getContext("2d")!;
      this.audio = Array(400)
        .fill(null)
        .map(() => Math.random());

      this.svgContainer = document.createElement("div");
      this.svgContainer.style.position = "absolute";
      this.svgContainer.style.display = "flex";
      this.svgContainer.style.flexDirection = "column";
      this.svgContainer.style.alignItems = "center";
      this.svgContainer.style.justifyContent = "center";
      this.svgContainer.style.pointerEvents = "none";

      this.shimmerElement = document.createElement("div");
      this.isLightMode = false;

      for (let i = 0; i < 3; i++) {
        const svgElement = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "svg",
        );
        svgElement.innerHTML = `
          <defs>
            <clipPath id="lineMdWatchLoop0">
              <rect width="24" height="12"></rect>
            </clipPath>
            <symbol id="lineMdWatchLoop1">
              <path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M23 16.5C23 10.4249 18.0751 5.5 12 5.5C5.92487 5.5 1 10.4249 1 16.5z"
                clip-path="url(#lineMdWatchLoop0)"
              >
                <animate
                  attributeName="d"
                  dur="3.78s"
                  keyTimes="0;0.07;0.93;1"
                  repeatCount="indefinite"
                  values="M23 16.5C23 11.5 18.0751 12 12 12C5.92487 12 1 11.5 1 16.5z;M23 16.5C23 10.4249 18.0751 5.5 12 5.5C5.92487 5.5 1 10.4249 1 16.5z;M23 16.5C23 10.4249 18.0751 5.5 12 5.5C5.92487 5.5 1 10.4249 1 16.5z;M23 16.5C23 11.5 18.0751 12 12 12C5.92487 12 1 11.5 1 16.5z"
                >
                </animate>
              </path>
            </symbol>
            <mask id="lineMdWatchLoop2">
              <use href="#lineMdWatchLoop1"></use>
              <use href="#lineMdWatchLoop1" transform="rotate(180 12 12)"></use>
              <circle cx="12" cy="12" r="0" fill="currentColor">
                <animate
                  attributeName="r"
                  dur="3.78s"
                  keyTimes="0;0.03;0.97;1"
                  repeatCount="indefinite"
                  values="0;3;3;0"
                >
                </animate>
              </circle>
            </mask>
          </defs>

          <rect
            width="24"
            height="24"
            fill="currentColor"
            mask="url(#lineMdWatchLoop2)"
          >
          </rect>
        `;
        svgElement.setAttribute("width", "2.1em");
        svgElement.setAttribute("height", "2.1em");
        svgElement.setAttribute("viewBox", "0 0 24 24");
        svgElement.style.margin = "5px 0";

        if (i === 1) {
          const shimmerContainer = document.createElement("div");
          shimmerContainer.style.position = "relative";
          shimmerContainer.appendChild(svgElement);

          this.shimmerElement = document.createElement("div");
          this.shimmerElement.classList.add("shimmer");
          shimmerContainer.appendChild(this.shimmerElement);

          this.svgContainer.appendChild(shimmerContainer);
        } else {
          this.svgContainer.appendChild(svgElement);
        }
      }

      this.startShimmerCycle();
    }

    startShimmerCycle() {
      setInterval(() => {
        this.shimmerElement.classList.add("shimmer-active");
        setTimeout(() => {
          this.shimmerElement.classList.remove("shimmer-active");
        }, 1200);
      }, 3400);
    }

    connectedCallback() {
      this.appendChild(this.canvas);
      this.appendChild(this.visualizerCanvas);
      this.appendChild(this.svgContainer);

      const resizeObserver = new ResizeObserver(() => this.setup());
      resizeObserver.observe(this);

      this.setup();

      // Watch for theme changes
      this.watchTheme();
    }

    disconnectedCallback() {
      cancelAnimationFrame(this.rafId);
    }

    watchTheme() {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "attributes" && mutation.attributeName === "class") {
            this.isLightMode = document.documentElement.classList.contains("light");
            this.updateColors();
          }
        });
      });

      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });

      // Initial check
      this.isLightMode = document.documentElement.classList.contains("light");
      this.updateColors();
    }

    updateColors() {
      if (this.isLightMode) {
        this.ctx.fillStyle = "rgba(255, 255, 255, 0.2)";
        this.visualizerCtx.fillStyle = "rgba(0, 0, 0, 0.7)";
      } else {
        this.ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
        this.visualizerCtx.fillStyle = "rgba(255, 255, 255, 0.7)";
      }
    }

    setup() {
      this.rafId > 0 && cancelAnimationFrame(this.rafId);

      const { clientWidth: width, clientHeight: height } = this;
      const dpr = window.devicePixelRatio || 1;
      this.canvas.width = width * dpr;
      this.canvas.height = height * dpr;
      this.canvas.style.width = `${width}px`;
      this.canvas.style.height = `${height}px`;
      this.ctx.scale(dpr, dpr);

      this.visualizerCanvas.width = width;
      this.visualizerCanvas.height = height;
      this.visualizerCanvas.style.position = "absolute";
      this.visualizerCanvas.style.top = "0";
      this.visualizerCanvas.style.left = "0";

      for (const star of this.stars) {
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
        star.z = 0;
      }

      this.ctx.translate(width / 2, height / 2);
      this.updateColors();

      this.lastTime = performance.now();
      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }

    frame(currentTime: number) {
      const { clientWidth: width, clientHeight: height } = this;

      const deltaTime = (currentTime - this.lastTime) / 16.67;
      this.lastTime = currentTime;

      // Update and draw stars
      this.ctx.fillRect(-width / 2, -height / 2, width, height);
      for (const star of this.stars) {
        star.update(width, height, SPEED, deltaTime);
        star.draw(this.ctx, this.isLightMode);
      }

      // Update and draw visualizer
      this.updateVisualizer();
      this.drawVisualizer();

      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }

    updateVisualizer() {
      this.audio = this.audio.map((x) =>
        Math.random() > 0.5 ? Math.max(x - 0.01, 0.02) : Math.min(x + 0.01, 1),
      );
    }

    drawVisualizer() {
      const { width, height } = this.visualizerCanvas;
      const visualizer = {
        bar: { width: 1, height: 40 },
        radius: 60,
      };

      const spacing = 360 / this.audio.length;
      const origin = {
        x: width / 2,
        y: height / 2,
      };

      this.visualizerCtx.clearRect(0, 0, width, height);

      for (const [i, piece] of this.audio.entries()) {
        const degrees = i * spacing;
        const radians = (degrees / 180) * Math.PI;

        this.visualizerCtx.save();
        this.visualizerCtx.translate(origin.x, origin.y);
        this.visualizerCtx.rotate(radians);
        this.visualizerCtx.fillRect(
          visualizer.bar.width / -2,
          visualizer.radius,
          visualizer.bar.width,
          visualizer.bar.height * piece,
        );
        this.visualizerCtx.restore();
      }

      // Position the SVG container in the center of the visualizer circle
      const containerSize = 100; // Adjust this value to change the size of the icon group
      this.svgContainer.style.width = `${containerSize}px`;
      this.svgContainer.style.height = `${containerSize}px`;
      this.svgContainer.style.left = `${origin.x - containerSize / 2}px`;
      this.svgContainer.style.top = `${origin.y - containerSize / 2}px`;
    }
  }

  customElements.define("quasar-background", QuasarBackground);
</script>
