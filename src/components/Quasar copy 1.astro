---

---

<quasar-background></quasar-background>
<div class="visual"></div>

<style>
  .visual {
    position: fixed; /* Stays in the same position */
    top: 50%; /* Center vertically */
    left: 50%; /* Center horizontally */
    transform: translate(-50%, -50%); /* Adjust for element's own dimensions */
    width: 100%; /* Ensures full width */
    height: 100%; /* Ensures full height */
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: -1; /* Always in the background */
  }
</style>
<!-- Quasar Background Stars -->
<script>
  import invariant from "tiny-invariant";

  const COUNT = 800;
  const SPEED = 0.1;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width: number, height: number, speed: number, deltaTime: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675 * deltaTime;
      this.x += this.x * (speed * 0.0225) * this.z * deltaTime;
      this.y += this.y * (speed * 0.0225) * this.z * deltaTime;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      const alpha = Math.min(this.z, 1);
      ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`;
      ctx.lineWidth = Math.min(this.z * 0.5, 2);
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  class QuasarBackground extends HTMLElement {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D | null;
    private stars: Star[];
    private rafId: number;
    private lastTime: number;
    private visual: HTMLDivElement;
    private visualizerCanvas: HTMLCanvasElement;
    private visualizerCtx: CanvasRenderingContext2D | null;
    private audio: number[];

    constructor() {
      super();
      this.canvas = document.createElement("canvas");
      this.ctx = this.canvas.getContext("2d");
      this.stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
      this.rafId = 0;
      this.lastTime = 0;

      // Create and append the visual element
      this.visual = document.createElement("div");
      this.visual.className = "visual"; // Set class for visual

      // Initialize visualizer canvas and context
      this.visualizerCanvas = document.createElement("canvas");
      this.visualizerCtx = this.visualizerCanvas.getContext("2d");
      this.audio = Array(400)
        .fill(null)
        .map(() => Math.random());
    }

    connectedCallback() {
      this.style.position = "fixed";
      this.style.inset = "0";
      this.style.zIndex = "-1";
      this.appendChild(this.canvas);

      // Ensure visual is created and appended
      if (!document.body.contains(this.visual)) {
        document.body.appendChild(this.visual); // Append visual to body if not already present
      }

      // Append visualizer canvas to the visual element
      this.visual.appendChild(this.visualizerCanvas);
      this.setupVisualizer(); // Ensure visualizer is set up
      const resizeObserver = new ResizeObserver(() => this.setup());
      resizeObserver.observe(this);

      this.setup();
    }

    disconnectedCallback() {
      cancelAnimationFrame(this.rafId);
      // Do not remove the visualizer or visual element
      // Optionally, you can remove the visual element if desired
      // if (document.body.contains(this.visual)) {
      //   document.body.removeChild(this.visual);
      // }
    }

    setup() {
      invariant(this.ctx, "canvas context should not be null");
      this.rafId > 0 && cancelAnimationFrame(this.rafId);

      const { clientWidth: width, clientHeight: height } = this;
      const dpr = window.devicePixelRatio || 1;
      this.canvas.width = width * dpr;
      this.canvas.height = height * dpr;
      this.canvas.style.width = `${width}px`;
      this.canvas.style.height = `${height}px`;
      this.ctx.scale(dpr, dpr);

      // Ensure the visual element is re-rendered
      if (document.body.contains(this.visual)) {
        document.body.removeChild(this.visual); // Remove existing visual
      }
      this.visual = document.createElement("div"); // Create a new visual element
      this.visual.className = "visual"; // Set class for visual
      document.body.appendChild(this.visual); // Append visual to body

      for (const star of this.stars) {
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
        star.z = 0;
      }

      this.ctx.translate(width / 2, height / 2);
      this.ctx.fillStyle = "rgba(0, 0, 0, 0.2)";

      this.lastTime = performance.now();
      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }

    frame(currentTime: number) {
      invariant(this.ctx, "canvas context should not be null");
      const { clientWidth: width, clientHeight: height } = this;

      const deltaTime = (currentTime - this.lastTime) / 16.67; // Normalize to 60 FPS
      this.lastTime = currentTime;

      for (const star of this.stars) {
        star.update(width, height, SPEED, deltaTime);
        star.draw(this.ctx);
      }

      this.ctx.fillRect(-width / 2, -height / 2, width, height);
      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }

    setupVisualizer() {
      const width = 400;
      const height = 400;

      this.visualizerCanvas.width = width;
      this.visualizerCanvas.height = height;

      const visualizer = {
        bar: {
          width: 1,
          height: 40,
          color: "white",
        },
        radius: 60,
      };

      const update = () => {
        this.audio = this.audio.map((x) =>
          Math.random() > 0.5
            ? Math.max(x - 0.01, 0.02)
            : Math.min(x + 0.01, 1),
        );
      };

      const render = () => {
        const spacing = 360 / this.audio.length;
        const origin = {
          x: width / 2 - visualizer.bar.width / 2,
          y: height / 2 - visualizer.bar.height,
        };

        this.visualizerCtx!.clearRect(0, 0, width, height);
        this.visualizerCtx!.fillStyle = "rgba(255, 255, 255, 0.7)";

        for (const [i, piece] of this.audio.entries()) {
          const degrees = i * spacing;
          const radians = (degrees / 180) * Math.PI;

          this.visualizerCtx!.save();
          this.visualizerCtx!.translate(origin.x, origin.y);
          this.visualizerCtx!.rotate(radians);
          this.visualizerCtx!.fillRect(
            visualizer.bar.width / -2,
            visualizer.radius,
            visualizer.bar.width,
            visualizer.bar.height * piece,
          );
          this.visualizerCtx!.restore();
        }

        update();
        requestAnimationFrame(render);
      };

      render();
    }
  }

  // Define the custom element
  customElements.define("quasar-background", QuasarBackground);
</script>

<!-- Visualizer Below -->
<script>
  const $ = document.querySelector.bind(document);

  const width = 400;
  const height = 400;

  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");

  const visual = $(".visual") || document.createElement("div"); // Ensure visual exists
  if (!$(".visual")) {
    visual.className = "visual"; // Set class if it doesn't exist
    document.body.appendChild(visual); // Append to body if not already present
  }

  canvas.width = width;
  canvas.height = height;

  visual.appendChild(canvas);

  const visualizer = {
    bar: {
      width: 1,
      height: 40,
      color: "white",
    },
    radius: 60,
  };

  const pieces = 400;
  let audio = Array(pieces)
    .fill(null)
    .map((x, i) => Math.random());

  const update = () => {
    audio = audio.map((x) =>
      Math.random() > 0.5 ? Math.max(x - 0.01, 0.02) : Math.min(x + 0.01, 1),
    );
  };

  const render = () => {
    const spacing = 360 / audio.length;
    const origin = {
      x: width / 2 - visualizer.bar.width / 2,
      y: height / 2 - visualizer.bar.height,
    };

    context.fillStyle = "rgba(255, 255, 255, 0.7)"; // Ghost white with 50% transparency
    context.clearRect(0, 0, width, height);

    for (const [i, piece] of audio.entries()) {
      const degrees = i * spacing;
      const radians = (degrees / 180) * Math.PI;

      context.save();
      context.translate(origin.x, origin.y);
      context.rotate(radians);
      context.fillRect(
        visualizer.bar.width / -2,
        visualizer.radius,
        visualizer.bar.width,
        visualizer.bar.height * piece,
      );
      context.restore();
    }

    update();
    requestAnimationFrame(render);
  };

  render();
</script>
