<quasar-background></quasar-background>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 800;
  const SPEED = 0.1;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width: number, height: number, speed: number, deltaTime: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675 * deltaTime;
      this.x += this.x * (speed * 0.0225) * this.z * deltaTime;
      this.y += this.y * (speed * 0.0225) * this.z * deltaTime;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      const alpha = Math.min(this.z, 1);
      ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`;
      ctx.lineWidth = Math.min(this.z * 0.5, 2);
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  class QuasarBackground extends HTMLElement {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D | null;
    private stars: Star[];
    private rafId: number;
    private lastTime: number;

    constructor() {
      super();
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
      this.rafId = 0;
      this.lastTime = 0;
    }

    connectedCallback() {
      this.style.position = 'fixed';
      this.style.inset = '0';
      this.style.zIndex = '-1';
      this.appendChild(this.canvas);

      const resizeObserver = new ResizeObserver(() => this.setup());
      resizeObserver.observe(this);

      this.setup();
    }

    disconnectedCallback() {
      cancelAnimationFrame(this.rafId);
    }

    setup() {
      invariant(this.ctx, "canvas context should not be null");
      this.rafId > 0 && cancelAnimationFrame(this.rafId);

      const { clientWidth: width, clientHeight: height } = this;
      const dpr = window.devicePixelRatio || 1;
      this.canvas.width = width * dpr;
      this.canvas.height = height * dpr;
      this.canvas.style.width = `${width}px`;
      this.canvas.style.height = `${height}px`;
      this.ctx.scale(dpr, dpr);

      for (const star of this.stars) {
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
        star.z = 0;
      }

      this.ctx.translate(width / 2, height / 2);
      this.ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
      // Remove this.ctx.strokeStyle = "white"; as it's set per star now

      this.lastTime = performance.now();
      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }

    frame(currentTime: number) {
      invariant(this.ctx, "canvas context should not be null");
      const { clientWidth: width, clientHeight: height } = this;

      const deltaTime = (currentTime - this.lastTime) / 16.67; // Normalize to 60 FPS
      this.lastTime = currentTime;

      for (const star of this.stars) {
        star.update(width, height, SPEED, deltaTime);
        star.draw(this.ctx);
      }

      this.ctx.fillRect(-width / 2, -height / 2, width, height);
      this.rafId = requestAnimationFrame((time) => this.frame(time));
    }
  }

  // Define the custom element
  customElements.define('quasar-background', QuasarBackground);
</script>
