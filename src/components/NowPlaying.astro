---
// Add TypeScript interface for the Spotify data
interface SpotifyData {
  isPlaying: boolean;
  title: string;
  artist: string;
  albumImageUrl: string;
  songUrl: string;
}
---

<div id="now-playing" class="flex items-center space-x-4 opacity-0 transition-opacity duration-300 rounded" style="background-image: url(''); background-size: cover; background-position: center; background-color: rgba(255, 255, 255, 0.5);"> <!-- Added semi-transparent white background -->
  <img id="album-cover" src="" alt="Album Cover" class="w-16 h-16 rounded-md hidden"> <!-- Hidden since we use background -->
  <div class="text-white"> <!-- Added text color for visibility -->
    <h3 id="song-title" class="font-semibold text-lg"></h3> <!-- Added text size -->
    <p id="artist-name" class="text-sm text-gray-300"></p> <!-- Changed text color for better contrast -->
  </div>
  <a id="spotify-link" href="" target="_blank" rel="noopener noreferrer" class="ml-auto flex-shrink-0"> <!-- Added flex-shrink-0 to keep it on the right -->
    <svg class="w-6 h-6" viewBox="0 0 168 168">
      <path fill="#1ED760" d="M83.996.277C37.747.277.253 37.77.253 84.019c0 46.251 37.494 83.741 83.743 83.741 46.254 0 83.744-37.49 83.744-83.741 0-46.246-37.49-83.738-83.745-83.738l.001-.004zm38.404 120.78a5.217 5.217 0 01-7.18 1.73c-19.662-12.01-44.414-14.73-73.564-8.07a5.222 5.222 0 01-6.249-3.93 5.213 5.213 0 013.926-6.25c31.9-7.291 59.263-4.15 81.337 9.34 2.46 1.51 3.24 4.72 1.73 7.18zm10.25-22.805c-1.89 3.075-5.91 4.045-8.98 2.155-22.51-13.839-56.823-17.846-83.448-9.764-3.453 1.043-7.1-.903-8.148-4.35a6.538 6.538 0 014.354-8.143c30.413-9.228 68.222-4.758 94.072 11.127 3.07 1.89 4.04 5.91 2.15 8.976v-.001zm.88-23.744c-26.99-16.031-71.52-17.505-97.289-9.684-4.138 1.255-8.514-1.081-9.768-5.219a7.835 7.835 0 015.221-9.771c29.581-8.98 78.756-7.245 109.83 11.202a7.823 7.823 0 012.74 10.733c-2.2 3.722-7.02 4.949-10.73 2.739z"/>
    </svg>
  </a>
</div>

<script>
  const nowPlayingElement = document.getElementById('now-playing') as HTMLDivElement;
  const albumCoverElement = document.getElementById('album-cover') as HTMLImageElement;
  const songTitleElement = document.getElementById('song-title') as HTMLHeadingElement;
  const artistNameElement = document.getElementById('artist-name') as HTMLParagraphElement;
  const spotifyLinkElement = document.getElementById('spotify-link') as HTMLAnchorElement;

  let lastUpdateTime = 0;
  const updateInterval = 30000; // 30 seconds

  async function updateNowPlaying() {
    const now = Date.now();
    if (now - lastUpdateTime < updateInterval) {
      return;
    }

    try {
      const response = await fetch('/api/spotify/now-playing', { headers: { 'Cache-Control': 'no-cache' } });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data: SpotifyData = await response.json();

      if (data.isPlaying) {
        updateUI(data);
        nowPlayingElement.style.opacity = '1';
      } else {
        nowPlayingElement.style.opacity = '0';
      }

      lastUpdateTime = now;
    } catch (error) {
      console.error('Error fetching now playing data:', error);
      nowPlayingElement.style.opacity = '0';
    }
  }

  function updateUI(data: SpotifyData) {
    nowPlayingElement.style.backgroundImage = `url(${data.albumImageUrl})`; // Set background image
    songTitleElement.textContent = data.title;
    artistNameElement.textContent = data.artist;
    spotifyLinkElement.href = data.songUrl;
  }

  // Initial update
  updateNowPlaying();

  // Set up interval and visibility change listener
  setInterval(updateNowPlaying, updateInterval);
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      updateNowPlaying();
    }
  });
</script>
