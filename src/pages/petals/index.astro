---
import type { CollectionEntry } from 'astro:content';
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import PetalCard from "@components/PetalCard.astro";
import { getCollection } from "astro:content";
import { getRandomSize } from "@lib/utils";

const posts: CollectionEntry<'petals'>[] = (await getCollection("petals"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());
---

<Layout title="Petals Gallery" description="A collection of my projects and experiments">
  <Container>
    <!-- <h1 class="text-3xl font-bold mb-4">Gallery:</h1> -->
    <div class="petal-container">
      <div class="petal-grid">
        {posts.map((post: CollectionEntry<'petals'>) => (
          <div class={`petal-item ${getRandomSize()}`}>
            <PetalCard post={post} />
          </div>
        ))}
      </div>
    </div>
  </Container>
</Layout>

<style>
  .petal-container {
    overflow-x: auto;
    overflow-y: hidden;
    padding: 0.25rem;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;  /* Firefox */
    -ms-overflow-style: none;  /* Internet Explorer 10+ */
  }

  .petal-container::-webkit-scrollbar {
    display: none;  /* WebKit */
  }

  .petal-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    grid-auto-flow: dense;
    grid-gap: 0.25rem;
    width: max-content;
    max-height: 80vh;
  }

  .petal-item {
    break-inside: avoid;
  }

  .small {
    grid-column: span 1;
    grid-row: span 1;
  }

  .medium {
    grid-column: span 2;
    grid-row: span 2;
  }

  .large {
    grid-column: span 3;
    grid-row: span 3;
  }

  @media (max-width: 640px) {
    .petal-grid {
      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    }
    .medium, .large {
      grid-column: span 2;
      grid-row: span 2;
    }
  }
</style>

<script>
  // Update the type declaration for startViewTransition
  declare global {
    type UpdateCallback = () => Promise<void> | void;
    interface Document {
      startViewTransition?: (callbackOptions?: UpdateCallback) => ViewTransition;
    }
    interface ViewTransition {
      finished: Promise<undefined>;
      ready: Promise<undefined>;
      updateCallbackDone: Promise<undefined>;
    }
  }

  function adjustPetalLayout() {
    const container = document.querySelector('.petal-container') as HTMLElement | null;
    const grid = document.querySelector('.petal-grid') as HTMLElement | null;
    const items = document.querySelectorAll('.petal-item');
    
    if (!container || !grid) return;

    let columnCount = Math.floor(container.clientHeight / 100);
    grid.style.gridTemplateRows = `repeat(${columnCount}, minmax(100px, 1fr))`;

    // Use Array.from() for better performance
    const totalWidth = Array.from(items).reduce((total, item) => {
      return total + (item instanceof HTMLElement ? item.offsetWidth : 0);
    }, 0);

    grid.style.width = `${totalWidth}px`;
  }

  function initPetalLayout() {
    adjustPetalLayout();
    
    const container = document.querySelector('.petal-container') as HTMLElement | null;
    if (container) {
      // Use passive event listener for better scrolling performance
      container.addEventListener('scroll', () => {
        requestAnimationFrame(adjustPetalLayout);
      }, { passive: true });
    }
  }

  // Use a single function for both DOMContentLoaded and astro:after-swap
  function onLoad() {
    initPetalLayout();
    window.addEventListener('resize', adjustPetalLayout);
  }

  document.addEventListener('DOMContentLoaded', onLoad);

  // Check for Astro's view transitions
  if (document.startViewTransition) {
    document.addEventListener('astro:after-swap', onLoad);
  }
</script>
