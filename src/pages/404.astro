---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import styles from "./src/styles/404.css";
---

<Layout title={"euthymia"} description={"awakened to a dream"}>
  <Container>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Euthymia - Awakened to a Dream</title>
        <link rel="stylesheet" href={styles} />
        {/* Linking to external CSS */}
      </head>
      <body>
        <div class="game-container">
          <!-- <h1>...awakened to a Dream...</h1> -->
          <div id="hud" class="hud">
            <div class="hud-stats short">
              <div class="hud-item">
                euthymia: <span id="euthymiaLevel">1</span>
              </div>
              <div class="hud-item">focus: <span id="focus">100</span></div>
              <div class="hud-item">qi: <span id="qi">100</span></div>
              <div class="hud-item">xp: <span id="experience">0</span></div>
            </div>
          </div>
          <div id="log" class="log">
            <!-- game log will be dynamically inserted here -->
          </div>
          <div class="actions bordered">
            
            <button id="cultivateExplore">cultivate</button>
            <button id="meditate">meditate</button>
            <button id="toggleInnovate">innovate</button>
          </div>
        </div>

        <!-- Innovate Modal -->
        <div id="innovateModal" class="modal">
          <div class="modal-content">
            <span class="close" id="closeInnovateModal">&times;</span>
            <h2>innovate:</h2>
            <br />
            <div class="innovation">
              <div id="innovateHerbs" class="innovate-item"></div>
              <div id="innovatePapyrus" class="innovate-item"></div>
              <div id="innovateCrystals" class="innovate-item"></div>
              <div id="innovateMateria" class="innovate-item"></div>
              <div id="innovateWands" class="innovate-item"></div>
              <div id="innovateTomes" class="innovate-item"></div>
              <div id="innovateTea" class="innovate-item"></div>
            </div>
            <h2>craft:</h2>
            <div class="crafting-list">
              <!-- Crafting items will be dynamically inserted here -->
            </div>
          </div>
        </div>

        <!-- Cultivate/Explore Modal -->
        <div id="cultivateExploreModal" class="modal">
          <div class="modal-content">
            <span class="close" id="closeCultivateExploreModal">&times;</span>
            <!-- <h2>choose an action:</h2> -->
            <button id="performCultivate" class="action">cultivate</button>
            <button id="exploreLocale" class="action">explore</button>
          
            <br />
            <div class="actions">
              <!-- <button id="performCultivate" class="action">cultivate</button>
              <button id="exploreLocale" class="action">explore locales</button> -->
            </div>
            <div id="locales" class="locales" style="display: none;">
              <button id="einSof" class="locale">Ein Sof</button>
              <button id="locale1" class="locale" style="display: none;"
                >Locale I: Tiphereth</button
              >
              <button id="locale2" class="locale" style="display: none;"
                >Locale II: Binah</button
              >
              <button id="locale3" class="locale" style="display: none;"
                >Locale III: Kether</button
              >
            </div>
          </div>
        </div>

        <style>
          .hud {
            margin-bottom: 10px;
          }
          .hud-stats.short {
            height: 50px;
            display: flex;
            justify-content: space-around;
            align-items: center;
          }
          .hud-item {
            margin: 0 10px;
          }
          .actions.bordered {
            border-radius: 8px;
            border: 1px solid #333;
            display: flex;
            justify-content: space-around;
            margin-top: 10px;
          }
        </style>

        <script>
          // Player Stats
          let focus = 100;
          let experience = 0;
          let euthymiaLevel = 1;
          let qi = 100; // Initialize Qi at 100

          // Gatherable Items with rarity
          let herbs = { amount: 0, rarity: "common" };
          let papyrus = { amount: 0, rarity: "common" };
          let crystals = { amount: 0, rarity: "common" };
          let materia = { amount: 0, rarity: "common" };

          // Craftable Items with rarity
          let innovate = {
            wand: { amount: 0, rarity: "common" },
            tome: { amount: 0, rarity: "common" },
            tea: { amount: 0, rarity: "common" },
          };

          // Craft Recipes with item requirements and rarity
          const craftRecipes = {
            wand: { herbs: 3, papyrus: 2, crystals: 1, rarity: "common" },
            tome: { herbs: 2, papyrus: 3, crystals: 1, rarity: "common" },
            tea: { herbs: 1, papyrus: 1, materia: 1, rarity: "common" },
          };

          // Available locales
          const locales = {
            einSof: { name: "Ein Sof", unlocked: true },
            1: { name: "Locale I: Tiphereth", unlocked: false },
            2: { name: "Locale II: Binah", unlocked: false },
            3: { name: "Locale III: Kether", unlocked: false },
          };

          const log = document.getElementById("log");
          const focusDisplay = document.getElementById("focus");
          const experienceDisplay = document.getElementById("experience");
          const euthymiaLevelDisplay = document.getElementById("euthymiaLevel");
          const qiDisplay = document.getElementById("qi"); // Changed from manaDisplay to qiDisplay
          const meditateButton = document.getElementById("meditate");
          const cultivateExploreButton =
            document.getElementById("cultivateExplore");
          const toggleInnovateButton =
            document.getElementById("toggleInnovate");
          const innovateModal = document.getElementById("innovateModal");
          const cultivateExploreModal = document.getElementById(
            "cultivateExploreModal",
          );
          const closeInnovateModal =
            document.getElementById("closeInnovateModal");
          const closeCultivateExploreModal = document.getElementById(
            "closeCultivateExploreModal",
          );
          const performCultivateButton =
            document.getElementById("performCultivate");
          const exploreLocaleButton = document.getElementById("exploreLocale");
          const localesContainer = document.getElementById("locales");

          let initialLog = true;

          // Function to update HUD
          function updateHUD() {
            focusDisplay.textContent = focus;
            experienceDisplay.textContent = experience;
            euthymiaLevelDisplay.textContent = euthymiaLevel;
            qiDisplay.textContent = qi; // Updated to qiDisplay for Qi
          }

          // Function to log messages
          function logMessage(message) {
            if (initialLog) {
              log.innerHTML = ""; // Clear the initial log
              initialLog = false;
            }
            const entry = document.createElement("div");
            entry.className = "log-entry";
            entry.textContent = message;
            log.insertBefore(entry, log.firstChild); // Insert new messages at the top

            // Remove excess log entries
            const entries = Array.from(log.children);
            if (entries.length > 3) {
              entries.slice(3).forEach((e) => e.classList.add("fade-out"));
              setTimeout(() => {
                entries.slice(3).forEach((e) => {
                  if (e.parentElement === log) {
                    log.removeChild(e);
                  }
                });
              }, 5000); // Adjust duration to match transition time
            }
          }

          // Event listener for Meditate button
          meditateButton.addEventListener("click", () => {
            // Increase focus based on current euthymia level
            const focusIncrease = euthymiaLevel * 5;
            focus += focusIncrease;
            logMessage(
              `You meditate and gather your thoughts. Focus increased to ${focus}.`,
            );

            // Calculate Qi cost based on current euthymia level
            const qiCost = Math.ceil(qi * (euthymiaLevel * 0.1));
            qi -= qiCost;
            logMessage(`Meditation costs ${qiCost} Qi. Qi decreased to ${qi}.`);

            // Randomly discover and gather materia
            const rarityRoll = Math.random();
            let discoveredItem = "";
            if (rarityRoll < 0.5) {
              discoveredItem = "herbs";
              herbs.amount += 1;
            } else if (rarityRoll < 0.3) {
              discoveredItem = "papyrus";
              papyrus.amount += 1;
            } else if (rarityRoll < 0.6) {
              discoveredItem = "crystals";
              crystals.amount += 1;
            } else {
              discoveredItem = "materia";
              materia.amount += 1;
            }
            logMessage(
              `You discovered ${discoveredItem} (${rarityRoll < 0.5 ? herbs.rarity : rarityRoll < 0.3 ? papyrus.rarity : rarityRoll < 0.6 ? crystals.rarity : materia.rarity}).`,
            );

            // Gain experience in proportion to current euthymia level
            const experienceIncrease = euthymiaLevel * 0.5;
            experience += experienceIncrease;
            logMessage(
              `You gain ${experienceIncrease} experience. Total experience: ${experience}.`,
            );

            // Randomly unlock a new locale
            const unlockRoll = Math.random();
            if (unlockRoll < 0.2 && !locales[1].unlocked) {
              locales[1].unlocked = true;
              logMessage("You have unlocked Locale I: Tiphereth.");
              document.getElementById("locale1").style.display = "inline-block";
            } else if (unlockRoll < 0.1 && !locales[2].unlocked) {
              locales[2].unlocked = true;
              logMessage("You have unlocked Locale II: Binah.");
              document.getElementById("locale2").style.display = "inline-block";
            } else if (unlockRoll < 0.05 && !locales[3].unlocked) {
              locales[3].unlocked = true;
              logMessage("You have unlocked Locale III: Kether.");
              document.getElementById("locale3").style.display = "inline-block";
            }

            updateHUD();
          });

          // Event listener for Cultivate/Explore button
          cultivateExploreButton.addEventListener("click", () => {
            cultivateExploreModal.style.display = "block";
          });

          // Event listener for closeCultivateExploreModal button
          closeCultivateExploreModal.addEventListener("click", () => {
            cultivateExploreModal.style.display = "none";
            localesContainer.style.display = "none"; // Hide locales when modal is closed
          });

          // Event listener for Cultivate button in modal
          performCultivateButton.addEventListener("click", () => {
            // Increase focus based on current euthymia level
            const focusIncrease = euthymiaLevel * 10;
            focus += focusIncrease;
            logMessage(
              `You cultivate your spiritual energy. Focus increased to ${focus}.`,
            );

            // Calculate Qi cost based on current euthymia level
            const qiCost = Math.ceil(qi * (euthymiaLevel * 0.15));
            qi -= qiCost;
            logMessage(
              `Cultivation costs ${qiCost} Qi. Qi decreased to ${qi}.`,
            );

            // Randomly discover and gather materia
            const rarityRoll = Math.random();
            let discoveredItem = "";
            if (rarityRoll < 0.5) {
              discoveredItem = "herbs";
              herbs.amount += 1;
            } else if (rarityRoll < 0.3) {
              discoveredItem = "papyrus";
              papyrus.amount += 1;
            } else if (rarityRoll < 0.6) {
              discoveredItem = "crystals";
              crystals.amount += 1;
            } else {
              discoveredItem = "materia";
              materia.amount += 1;
            }
            logMessage(
              `You discovered ${discoveredItem} (${rarityRoll < 0.5 ? herbs.rarity : rarityRoll < 0.3 ? papyrus.rarity : rarityRoll < 0.6 ? crystals.rarity : materia.rarity}).`,
            );

            // Gain experience in proportion to current euthymia level
            const experienceIncrease = euthymiaLevel * 0.75;
            experience += experienceIncrease;
            logMessage(
              `You gain ${experienceIncrease} experience. Total experience: ${experience}.`,
            );

            // Randomly unlock a new locale
            const unlockRoll = Math.random();
            if (unlockRoll < 0.2 && !locales[1].unlocked) {
              locales[1].unlocked = true;
              logMessage("You have unlocked Locale I: Tiphereth.");
              document.getElementById("locale1").style.display = "inline-block";
            } else if (unlockRoll < 0.1 && !locales[2].unlocked) {
              locales[2].unlocked = true;
              logMessage("You have unlocked Locale II: Binah.");
              document.getElementById("locale2").style.display = "inline-block";
            } else if (unlockRoll < 0.05 && !locales[3].unlocked) {
              locales[3].unlocked = true;
              logMessage("You have unlocked Locale III: Kether.");
              document.getElementById("locale3").style.display = "inline-block";
            }

            updateHUD();
            cultivateExploreModal.style.display = "none"; // Close the modal after cultivating
          });

          // Event listener for Explore button in modal
          exploreLocaleButton.addEventListener("click", () => {
            localesContainer.style.display = "block"; // Show the locales for exploration
          });

          // Event listener for Toggle Innovate button
          toggleInnovateButton.addEventListener("click", () => {
            innovateModal.style.display = "block";
            updateInnovateModal(); // Function to update the innovate modal with items and crafting options
          });

          // Event listener for closeInnovateModal button
          closeInnovateModal.addEventListener("click", () => {
            innovateModal.style.display = "none";
          });

          // Event listeners for locales
          document
            .getElementById("einSof")
            .addEventListener("click", () => exploreLocale("einSof"));
          document
            .getElementById("locale1")
            .addEventListener("click", () => exploreLocale(1));
          document
            .getElementById("locale2")
            .addEventListener("click", () => exploreLocale(2));
          document
            .getElementById("locale3")
            .addEventListener("click", () => exploreLocale(3));

          // Function to explore a locale
          function exploreLocale(localeId) {
            const locale = locales[localeId];
            if (locale.unlocked) {
              logMessage(
                `You explore ${locale.name} and discover new knowledge and items.`,
              );
              // Logic for exploring the locale and discovering items
            } else {
              logMessage(`The path to ${locale.name} is not yet open.`);
            }
            cultivateExploreModal.style.display = "none"; // Close the modal after exploring
            localesContainer.style.display = "none"; // Hide locales after selection
          }

          // Function to update the innovate modal with items and crafting options
          function updateInnovateModal() {
            // Update innovate items
            document.getElementById("innovateHerbs").textContent =
              `Herbs: ${herbs.amount}`;
            document.getElementById("innovatePapyrus").textContent =
              `Papyrus: ${papyrus.amount}`;
            document.getElementById("innovateCrystals").textContent =
              `Crystals: ${crystals.amount}`;
            document.getElementById("innovateMateria").textContent =
              `Materia: ${materia.amount}`;
            document.getElementById("innovateWands").textContent =
              `Wands: ${innovate.wand.amount}`;
            document.getElementById("innovateTomes").textContent =
              `Tomes: ${innovate.tome.amount}`;
            document.getElementById("innovateTea").textContent =
              `Tea: ${innovate.tea.amount}`;

            // Update crafting list
            const craftingList = document.querySelector(".crafting-list");
            craftingList.innerHTML = ""; // Clear existing crafting options

            // Add crafting options dynamically
            for (const [item, recipe] of Object.entries(craftRecipes)) {
              const craftButton = document.createElement("button");
              craftButton.textContent = `Craft ${item}`;
              craftButton.className = "craft-item";
              craftButton.addEventListener("click", () =>
                craftItem(item, recipe),
              );
              craftingList.appendChild(craftButton);
            }
          }

          // Function to craft an item
          function craftItem(item, recipe) {
            // Check if player has enough ingredients
            const {
              herbs: requiredHerbs,
              papyrus: requiredPapyrus,
              crystals: requiredCrystals,
              materia: requiredMateria,
            } = recipe;
            if (
              herbs.amount >= requiredHerbs &&
              papyrus.amount >= requiredPapyrus &&
              crystals.amount >= requiredCrystals &&
              materia.amount >= requiredMateria
            ) {
              // Deduct ingredients
              herbs.amount -= requiredHerbs;
              papyrus.amount -= requiredPapyrus;
              crystals.amount -= requiredCrystals;
              materia.amount -= requiredMateria;

              // Add crafted item to innovate
              innovate[item].amount += 1;
              logMessage(`You have crafted a ${item}.`);

              // Update the innovate modal
              updateInnovateModal();
            } else {
              logMessage(
                `You do not have enough ingredients to craft a ${item}.`,
              );
            }
          }

          // Initialize HUD
          updateHUD();
        </script>
      </body>
    </html>
  </Container>
</Layout>